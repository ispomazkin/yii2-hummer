<?php
/**
 * Created by PhpStorm.
 * User: pomazkinis
 * Date: 30.05.2019
 * Time: 12:40
 */


namespace ispomazkin\cadillac\controllers;

use Yii;
use yii\httpclient\CurlTransport;
use yii\web\Controller;
use yii\httpclient\Client;
use ispomazkin\chevrolet\Module;
use yii\helpers\Json;
use yii\web\NotFoundHttpException;
use yii\helpers\Url;
use app\components\Helper;

class CadillacController extends Controller
{
    /**
     * int
     * Макс Кол-во секунд для ответа сервера
     */
    const TIMEOUT=3;

    /**
     * Макс Кол-во секунд для соединения с сервером
     */
    const CONNECTTIMEOUT=3;

    /**
     * @var null | string
     */
    protected $api_host=null;

    /**
     * @var null | string
     */
    protected $api_image_path=null;

    /**
     * @var null | string
     */
    protected $search_pattern=null;


    /**
     * @var array
     * Паттерн для вывода различного типа title на страницах
     * Доступны шаблоны
     * {model},{category},{group},{subgroup},{last}
     */
    protected $titlePattern;

    /**
     * @var array
     * Паттерн для вывода различного типа keywords на страницах
     * Доступны шаблоны
     * {model},{category},{group},{subgroup},{last}
     */
    protected $kwdsPattern;


    /**
     * @var array
     * Паттерн для вывода различного типа description на страницах
     * Доступны шаблоны
     * {model},{category},{group},{subgroup},{last}
     */
    protected $descriptionPattern;



    /**
     * @param $action
     * @return bool
     * @throws \yii\web\BadRequestHttpException
     */
    public function beforeAction($action)
    {
        $module = Yii::$app->getModule('cadillac');
        /* @var $module Module*/
        if (!$module)
            throw new \Exception('The module Cadillac was not configured in your app config file');

        if (!($this->api_host = $module->host))
            throw new \Exception('The property Host of Cadillac module was not configured in your app config file');

        if (!($this->api_image_path = $module->image_path))
            throw new \Exception('The property Image_path of Cadillac module was not configured in your app config file');

        if (!($this->search_pattern = $module->search_pattern))
            throw new \Exception('The property search_pattern of Cadillac module was not configured in your app config file');

        //settings for my project
        Yii::$app->params['main_page'] = false;
        /***/
        $this->descriptionPattern = $module->descriptionPattern;

        $this->kwdsPattern = $module->kwdsPattern;

        $this->titlePattern = $module->titlePattern;

        Yii::setAlias('@cadillac_views', Yii::getAlias('@ispomazkin/cadillac/views/cadillac'))	;

        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    /**
     * Отображение списка моделей по Годам
     */
    public function actionIndex()
    {
        $url = $this->api_host.'/cadillac/get-years';

        $data = Json::decode($this->sendRequest($url));
        $new=[];

        foreach($data as $row)
        {
            $new[$row['id1']][] = [
                'model'=>$row['model'],
                'year'=>$row['year'],
                'url'=>$row['url']
            ];
        }

        $this->createSeo('years',$data);
        return $this->render('@cadillac_views/index',[
            'data'=>$new,
        ]);
    }

    /**
     * @param $type years|categories|groups|subgroups|parts
     * @param $data array
     */
    protected function createSeo($type,$data)
    {

        $pattern = [
            '{model}'=>isset($data['model']) ? $data['model'] : '',
            '{year}'=>isset($data['year']) ? $data['year'] : '',
            '{category}'=>isset($data['category']) ? $data['category'] : '',
            '{group}'=>isset($data['group']) ? $data['group'] : '',
            '{parts}'=> $data['group'],
        ];


        foreach($this->titlePattern as $key=>&$value)
            $value = str_replace(array_keys($pattern),$pattern,$value);

        foreach($this->kwdsPattern as $key=>&$value)
            $value = str_replace(array_keys($pattern),$pattern,$value);

        foreach($this->descriptionPattern as $key=>&$value)
            $value = str_replace(array_keys($pattern),$pattern,$value);

        $this->view->title = $this->titlePattern[$type];
        $this->view->registerMetaTag([
            'name' => 'description',
            'content' => $this->descriptionPattern[$type]
        ]);

        $this->view->registerMetaTag([
            'name' => 'keywords',
            'content' => $this->kwdsPattern[$type]
        ]);


        switch($type)
        {
            case 'years':
                break;

            case 'categories':
                $this->view->params['breadcrumbs'][] =  ['label'=>$this->titlePattern['years'],'url'=>Url::to(['cadillac/index'])];
                break;

            case 'groups':
                $this->view->params['breadcrumbs'][] =  ['label'=>$this->titlePattern['years'],'url'=>Url::to(['cadillac/index'])];
                $this->view->params['breadcrumbs'][] =  ['label'=>$this->titlePattern['categories'],'url'=>Url::to(['cadillac/categories',
                    'year_url'=>$data['model_url'],
                ])];
                break;


            case 'parts' :
                $this->view->params['breadcrumbs'][] =  ['label'=>$this->titlePattern['years'],'url'=>Url::to(['cadillac/index'])];
                $this->view->params['breadcrumbs'][] =  ['label'=>$this->titlePattern['categories'],'url'=>Url::to(['cadillac/categories',
                    'year_url'=>$data['model_url'],
                ])];
                $this->view->params['breadcrumbs'][] = [
                    'label'=>$this->titlePattern['groups'],
                    'url' => Url::to(['cadillac/groups','year_url'=>$data['model_url'],'category_url'=>$data['category_url'],
                    ])
                ];


        }
        $this->view->params['breadcrumbs'][] = $this->view->title;

    }

    /**
     * @param $year_url
     * @return string
     * @throws NotFoundHttpException
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function actionCategories($year_url)
    {
        $url = $this->api_host.'/cadillac/get-categories?url='.$year_url;
        $data = Json::decode($this->sendRequest($url));

        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('categories',$data['body']);

        return $this->render('@cadillac_views/categories',[
            'data'=>$data['body'],
        ]);
    }

    /**
     * @param $year_url
     * @param $category_url
     * @return string
     * @throws NotFoundHttpException
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     */
    public function actionGroups($year_url,$category_url)
    {
        $url = $this->api_host.'/cadillac/get-groups?year_url='.$year_url.'&category_url='.$category_url;

        $data = Json::decode($this->sendRequest($url));
        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('groups',$data['body']);

        return $this->render('@cadillac_views/groups_last',[
            'data'=>$data['body'],
            'img_path'=>$this->api_host . $this->api_image_path
        ]);
    }




    /**
     * @param $model_url
     * @param $last_url
     */
    public function actionParts($year_url,$last_url)
    {
        $url = $this->api_host.'/cadillac/get-parts?year_url='.$year_url.'&last_url='.$last_url;

        $data = Json::decode($this->sendRequest($url));

        if ($data['status']!='ok')
            throw new NotFoundHttpException();

        $this->createSeo('parts',$data['body']);

        return $this->render('@cadillac_views/parts',[
            'data'=>$data['body'],
            'img_path'=>$this->api_host . $this->api_image_path,
            'search_pattern'=>$this->search_pattern
        ]);

    }



    /**
     * @param $url
     * @throws \yii\base\InvalidConfigException
     * @throws \yii\httpclient\Exception
     * @return string
     *
     */
    protected function sendRequest($url)
    {
        $client = new Client([
            'transport' => CurlTransport::class
        ]);

        $result = $client->createRequest()
            ->setUrl($url)
            ->setOptions(['timeout'=>self::TIMEOUT,'connecttimeout'=>self::CONNECTTIMEOUT])
            ->send();

        return $result->content;
    }

}
